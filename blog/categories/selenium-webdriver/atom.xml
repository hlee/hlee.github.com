<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: selenium-webdriver | Ruby on Rails Blog]]></title>
  <link href="http://hlee.github.com/blog/categories/selenium-webdriver/atom.xml" rel="self"/>
  <link href="http://hlee.github.com/"/>
  <updated>2012-12-20T09:01:14-05:00</updated>
  <id>http://hlee.github.com/</id>
  <author>
    <name><![CDATA[Ken Lu, Andrew Sheelan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby selenium-webdriver watir-webdriver]]></title>
    <link href="http://hlee.github.com/blog/2011/10/26/ruby-selenium-webdriver-watir-webdriver/"/>
    <updated>2011-10-26T08:12:00-04:00</updated>
    <id>http://hlee.github.com/blog/2011/10/26/ruby-selenium-webdriver-watir-webdriver</id>
    <content type="html"><![CDATA[<p>There are many other Selenium gems out there, but this is the only official, maintained gem. If you're looking for a slightly higher level API built on the same technology, you may want to check out <a href="http://watirwebdriver.com/">watir-webdriver</a> or <a href="https://github.com/jnicklas/capybara">capybara</a>.</p>

<h2>example code</h2>

<p>```ruby
require "selenium-webdriver"</p>

<p>driver = Selenium::WebDriver.for :firefox
driver.navigate.to "http://google.com"</p>

<p>element = driver.find_element(:name, 'q')
element.send_keys "Hello WebDriver!"
element.submit</p>

<p>puts driver.title</p>

<p>driver.quit</p>

<h1>execute arbitrary javascript</h1>

<p>puts driver.execute_script("return window.location.pathname")</p>

<h1>pass elements between Ruby and JavaScript</h1>

<p>element = driver.execute_script("return document.body")
driver.execute_script("return arguments[0].tagName", element) #=> "BODY"</p>

<h1>wait for a specific element to show up</h1>

<p>wait = Selenium::WebDriver::Wait.new(:timeout => 10) # seconds
wait.until { driver.find_element(:id => "foo") }</p>

<h1>switch to a frame</h1>

<p>driver.switch_to.frame "some-frame" # name or id
driver.switch_to.frame driver.find_element(:id, 'some-frame') # frame element</p>

<h1>switch back to the main document</h1>

<p>driver.switch_to.default_content</p>

<h1>repositionning and resizing browser window:</h1>

<p>driver.manage.window.move_to(300, 400)
driver.manage.window.resize_to(500, 800)
driver.manage.window.maximize</p>

<h1>get an attribute</h1>

<p>class_name = element.attribute("class")</p>

<h1>is the element visible on the page?</h1>

<p>element.displayed?</p>

<h1>click the element</h1>

<p>element.click</p>

<h1>get the element location</h1>

<p>element.location</p>

<h1>scroll the element into view, then return its location</h1>

<p>element.location_once_scrolled_into_view</p>

<h1>get the width and height of an element</h1>

<p>element.size</p>

<h1>press space on an element - see Selenium::WebDriver::Keys for possible values</h1>

<p>element.send_keys :space</p>

<h1>get the text of an element</h1>

<p>element.text
```</p>

<h2>SSL Certificates</h2>

<p>The Firefox driver ignores invalid SSL certificates by default. If this is not the behaviour you want, you can do:
```ruby
profile = Selenium::WebDriver::Firefox::Profile.new
profile.secure_ssl = true</p>

<p>driver = Selenium::WebDriver.for :firefox, :profile => profile
<code>
There is an edge case where the default SSL certificate check will not work correctly. WebDriver assumes that the certificate is untrusted whenever there's a problem, which means a certificate from a trusted issuer but with a hostname mismatch (e.g. a production certificate in a test environment) will not be correctly ovverriden. See UntrustedSSLCertificates for more on why this is. To work around it, tell the Firefox driver to not assume the issuer is untrusted:
</code>ruby
profile = Selenium::WebDriver::Firefox::Profile.new
profile.assume_untrusted_certificate_issuer = false
driver = Selenium::WebDriver.for :firefox, :profile => profile
```
Not that Profile#secure_ssl remains set to the default value of true in the above example<a href="http://code.google.com/p/selenium/wiki/RubyBindings">.</a></p>
]]></content>
  </entry>
  
</feed>
