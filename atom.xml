<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby on Rails Blog]]></title>
  <link href="http://hlee.github.com/atom.xml" rel="self"/>
  <link href="http://hlee.github.com/"/>
  <updated>2012-12-20T09:01:14-05:00</updated>
  <id>http://hlee.github.com/</id>
  <author>
    <name><![CDATA[Ken Lu, Andrew Sheelan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby timeout]]></title>
    <link href="http://hlee.github.com/blog/2012/12/09/ruby-timeout/"/>
    <updated>2012-12-09T06:56:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/12/09/ruby-timeout</id>
    <content type="html"><![CDATA[<h2>standard timeout</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;timeout&#39;</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">complete_results</span> <span class="o">=</span> <span class="no">Timeout</span><span class="o">.</span><span class="n">timeout</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>   <span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Timeout</span><span class="o">::</span><span class="no">Error</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Print me something please&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>sometime, the code inner with begin will catch exception
such as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;timeout&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">: Starting&quot;</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="no">Timeout</span><span class="o">.</span><span class="n">timeout</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="nb">sleep</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">: Caught an exception: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Timeout</span><span class="o">::</span><span class="no">Error</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">: Timeout: </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">: Never timed out.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>so new a thread, as ruby 1.9 thread is native</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">complete_results</span> <span class="o">=</span> <span class="no">Timeout</span><span class="o">.</span><span class="n">timeout</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Thread</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="n">results</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">artist</span><span class="p">,</span> <span class="n">album_name</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Timeout</span><span class="o">::</span><span class="no">Error</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Print me something please&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>implementation</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># From lib/timeout.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">timeout</span><span class="p">(</span><span class="n">sec</span><span class="p">,</span> <span class="n">exception</span><span class="o">=</span><span class="no">Error</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">yield</span> <span class="k">if</span> <span class="n">sec</span> <span class="o">==</span> <span class="kp">nil</span> <span class="ow">or</span> <span class="n">sec</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">ThreadError</span><span class="p">,</span> <span class="s2">&quot;timeout within critical session&quot;</span> <span class="k">if</span> <span class="no">Thread</span><span class="o">.</span><span class="n">critical</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">sleep</span> <span class="n">sec</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">raise</span> <span class="n">exception</span><span class="p">,</span> <span class="s2">&quot;execution expired&quot;</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">sec</span>
</span><span class='line'>    <span class="c1">#    return true</span>
</span><span class='line'>  <span class="k">ensure</span>
</span><span class='line'>    <span class="n">y</span><span class="o">.</span><span class="n">kill</span> <span class="k">if</span> <span class="n">y</span> <span class="ow">and</span> <span class="n">y</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>system timer only for 1.8<a href="http://ph7spot.com/musings/system-timer">.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rspec test failed after changing to capybara-webkit]]></title>
    <link href="http://hlee.github.com/blog/2012/12/09/rspec-test-failed-after-changing-to-capybara-webkit/"/>
    <updated>2012-12-09T06:03:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/12/09/rspec-test-failed-after-changing-to-capybara-webkit</id>
    <content type="html"><![CDATA[<h2>problem as</h2>

<p>written some RSpec test for my rails 3.2 application and because I was annyoed by the Browser popping up ich tried to change from firefox to capybara-webkit. After this all tests still run, except one. The line that is failing is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span> <span class="p">{</span> <span class="n">click_button</span> <span class="s2">&quot;Create&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Answer</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>solution is easy, The simplest way to resolve this is to wait before checking:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span> <span class="p">{</span> <span class="n">click_button</span> <span class="s2">&quot;Create&quot;</span><span class="p">;</span> <span class="nb">sleep</span> <span class="mi">2</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Answer</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a race condition here between Capybara sending the click action to the server and your test checking the database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[capybara webkit or selenium or watir to simulate browser behavior]]></title>
    <link href="http://hlee.github.com/blog/2012/12/06/capybara-webkit-or-selenium-or-watir-to-simulate-browser-behavior/"/>
    <updated>2012-12-06T15:29:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/12/06/capybara-webkit-or-selenium-or-watir-to-simulate-browser-behavior</id>
    <content type="html"><![CDATA[<p>Sometimes we want to simulate browser behavior. The situation can be test or automation script.</p>

<h2>install capybara-webkit</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#capybara-webkit need qt</span>
</span><span class='line'><span class="c1">#ubuntu</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">aptitude</span> <span class="n">install</span> <span class="n">libqt4</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<h2>using capybara dsl</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/dsl&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:webkit</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">DSL</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">login!</span>
</span><span class='line'>    <span class="n">within</span><span class="p">(</span><span class="s2">&quot;//form[@id=&#39;session&#39;]&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s1">&#39;Login&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;user@example.com&#39;</span>
</span><span class='line'>      <span class="n">fill_in</span> <span class="s1">&#39;Password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;password&#39;</span>
</span><span class='line'>      <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;First Name&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;John&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;Password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;Seekrit&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;Description&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;Really Long Text...&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">choose</span><span class="p">(</span><span class="s1">&#39;A Radio Button&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">check</span><span class="p">(</span><span class="s1">&#39;A Checkbox&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uncheck</span><span class="p">(</span><span class="s1">&#39;A Checkbox&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">attach_file</span><span class="p">(</span><span class="s1">&#39;Image&#39;</span><span class="p">,</span> <span class="s1">&#39;/path/to/image.jpg&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">select</span><span class="p">(</span><span class="s1">&#39;Option&#39;</span><span class="p">,</span> <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s1">&#39;Select Box&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">click_link</span> <span class="s1">&#39;Sign in&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Debugging</h2>

<p>It can be useful to take a snapshot of the page as it currently is and take a
look at it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">save_and_open_page</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also retrieve the current state of the DOM as a string using
<tt><a href="http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Session#html-instance_method">page.html</a></tt>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">print</span> <span class="n">page</span><span class="o">.</span><span class="n">html</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is mostly useful for debugging. You should avoid testing against the
contents of <code>page.html</code> and use the more expressive finder methods instead.</p>

<p>Finally, in drivers that support it, you can save a screenshot:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">save_screenshot</span><span class="p">(</span><span class="s1">&#39;screenshot.png&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Calling remote servers</h2>

<p>Normally Capybara expects to be testing an in-process Rack application, but you
can also use it to talk to a web server running anywhere on the internets, by
setting app_host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s1">&#39;http://www.google.com&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">visit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: the default driver (<code>:rack_test</code>) does not support running
against a remote server. With drivers that support it, you can also visit any
URL directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">visit</span><span class="p">(</span><span class="s1">&#39;http://www.google.com&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default Capybara will try to boot a rack application automatically. You
might want to switch off Capybara&#8217;s rack server if you are running against a
remote application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">run_server</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using the sessions manually</h2>

<p>For ultimate control, you can instantiate and use a
<a href="http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Session">Session</a>
manually.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">session</span> <span class="o">=</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">Session</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:webkit</span><span class="p">,</span> <span class="n">my_rack_app</span><span class="p">)</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="n">within</span><span class="p">(</span><span class="s2">&quot;//form[@id=&#39;session&#39;]&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">session</span><span class="o">.</span><span class="n">fill_in</span> <span class="s1">&#39;Login&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;user@example.com&#39;</span>
</span><span class='line'>  <span class="n">session</span><span class="o">.</span><span class="n">fill_in</span> <span class="s1">&#39;Password&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;password&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="n">click_link</span> <span class="s1">&#39;Sign in&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>XPath, CSS and selectors</h2>

<p>Capybara does not try to guess what kind of selector you are going to give it,
and will always use CSS by default.  If you want to use XPath, you&#8217;ll need to
do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">within</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s1">&#39;//ul/li&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s1">&#39;//ul/li&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s1">&#39;//li[contains(.//a[@href = &quot;#&quot;]/text(), &quot;foo&quot;)]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively you can set the default selector to XPath:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_selector</span> <span class="o">=</span> <span class="ss">:xpath</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="s1">&#39;//ul/li&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></code></pre></td></tr></table></div></figure>


<p>Capybara allows you to add custom selectors, which can be very useful if you
find yourself using the same kinds of selectors very often:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">add_selector</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">xpath</span> <span class="p">{</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span> <span class="no">XPath</span><span class="o">.</span><span class="n">descendant</span><span class="o">[</span><span class="no">XPath</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="o">==</span> <span class="nb">id</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">add_selector</span><span class="p">(</span><span class="ss">:row</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">xpath</span> <span class="p">{</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="s2">&quot;.//tbody/tr[</span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2">]&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">add_selector</span><span class="p">(</span><span class="ss">:flash_type</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">css</span> <span class="p">{</span> <span class="o">|</span><span class="n">type</span><span class="o">|</span> <span class="s2">&quot;#flash.</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The block given to xpath must always return an XPath expression as a String, or
an XPath expression generated through the XPath gem. You can now use these
selectors like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">find</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s1">&#39;post_123&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="ss">:row</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="ss">:flash_type</span><span class="p">,</span> <span class="ss">:notice</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can specify an optional match option which will automatically use the
selector if it matches the argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">add_selector</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">xpath</span> <span class="p">{</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span> <span class="no">XPath</span><span class="o">.</span><span class="n">descendant</span><span class="o">[</span><span class="no">XPath</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="o">==</span> <span class="nb">id</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">match</span> <span class="p">{</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span> <span class="n">value</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Symbol</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">find</span><span class="p">(</span><span class="ss">:post_123</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This :id selector is already built into Capybara by default, so you don&#8217;t
need to add it yourself<a href="https://github.com/jnicklas/capybara">.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heroku deploy procedure]]></title>
    <link href="http://hlee.github.com/blog/2012/12/02/heroku-deploy-procedure/"/>
    <updated>2012-12-02T09:09:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/12/02/heroku-deploy-procedure</id>
    <content type="html"><![CDATA[<p>Just keep record of the procedure to deploy heroku
<strong>install heroku</strong>
heroku gem(deprecated) or <a href="https://toolbelt.heroku.com/">toolbelt</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">aptitude</span> <span class="n">install</span> <span class="n">heroku</span><span class="o">-</span><span class="n">toolbelt</span>
</span><span class='line'><span class="c1">#or for ubuntu</span>
</span><span class='line'><span class="n">wget</span> <span class="o">-</span><span class="n">qO</span><span class="o">-</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">toolbelt</span><span class="o">.</span><span class="n">heroku</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">install</span><span class="o">-</span><span class="n">ubuntu</span><span class="o">.</span><span class="n">sh</span> <span class="o">|</span> <span class="n">sh</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>login with credentials</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">heroku</span> <span class="n">login</span>
</span><span class='line'><span class="c1">#Enter your Heroku credentials.</span>
</span><span class='line'><span class="c1">#Email: adam@example.com</span>
</span><span class='line'><span class="c1">#Password:</span>
</span><span class='line'><span class="c1">#Could not find an existing public key.</span>
</span><span class='line'><span class="c1">#Would you like to generate one? [Yn]</span>
</span><span class='line'><span class="c1">#Generating new SSH public key.</span>
</span><span class='line'><span class="c1">#Uploading ssh public key /Users/adam/.ssh/id_rsa.pub</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>create app</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">heroku</span> <span class="n">create</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">rename</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>add to git and make a commit</p>

<p><strong>push and deploy</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#change Gemfile put sqlite3 to development </span>
</span><span class='line'><span class="c1">#add pg to production</span>
</span><span class='line'><span class="c1">#if you change Gemfile you need to git commit again otherwise heroku will not know</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">heroku</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<p>if you got error</p>

<blockquote><p>Permission denied (publickey).
fatal: The remote end hung up unexpectedly</p></blockquote>

<p>try
and reference <a href="https://devcenter.heroku.com/articles/keys#adding_keys_to_heroku">add keys to heroku</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">heroku</span> <span class="n">keys</span><span class="ss">:add</span> <span class="o">~</span><span class="sr">/.ssh/i</span><span class="n">d_rsa</span><span class="o">.</span><span class="n">pub</span>
</span><span class='line'><span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">rsa</span> <span class="o">-</span><span class="n">f</span> <span class="n">id_rsa</span>
</span><span class='line'><span class="n">git</span> <span class="nb">clone</span> <span class="n">git</span><span class="vi">@heroku</span><span class="o">.</span><span class="n">com</span><span class="ss">:stark</span><span class="o">-</span><span class="n">dawn</span><span class="o">-</span><span class="mi">1234</span><span class="o">.</span><span class="n">git</span> <span class="o">-</span><span class="n">o</span> <span class="n">heroku</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">keys</span><span class="ss">:clear</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">keys</span><span class="ss">:add</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>migration and open</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">run</span> <span class="n">console</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">logs</span>
</span><span class='line'><span class="n">heroku</span> <span class="nb">open</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sudo vs RVMSudo]]></title>
    <link href="http://hlee.github.com/blog/2012/12/02/sudo-vs-rvmsudo/"/>
    <updated>2012-12-02T08:42:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/12/02/sudo-vs-rvmsudo</id>
    <content type="html"><![CDATA[<p><a href="https://rvm.io">RVM</a> is a great command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.
This is exactly what makes it special, its easy to <a href="https://rvm.io/rvm/install">install RVM</a> with just a few commands..</p>

<p>Installing RVM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -L https://get.rvm.io | bash -s stable
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p>Source is to load bashrc in the same window.
Now just use</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span></code></pre></td></tr></table></div></figure>


<p>and it now you can start using ruby version 1.9.3 and switch or add more
versions and install gems in its own version.</p>

<p>In spite of having such features to help the user, everything from there runs only for the logged in user, there may be times where you must run Ruby scripts with RVM as root (or another user) via sudo.</p>

<p>But if you do this after installing rvm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ruby script.rb
</span></code></pre></td></tr></table></div></figure>


<p>It would problably not work at all or would be using the system installed
version of ruby(which might be old). Do not forget to check the version of the ruby when you do a
sudo, if it runs!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ruby -v
</span></code></pre></td></tr></table></div></figure>


<p>sudo always starts a new subshell and runs as root from the current user. That new subshell&#8217;s environment will be completely different, and which means that it does not contain RVM or the other paths.
There is a workaround, where you can manually add the path by finding them.
Not a great idea, but works.</p>

<p>RVM has a solution for running sudo with the environments, the &#8216;rvmsudo&#8217; command. It will pass on any environment variables that RVM set up to get you to the correct Ruby.
This includes the following variables</p>

<ul>
<li>$PATH</li>
<li>$GEM_HOME</li>
<li>$GEM_PATH</li>
<li>$BUNDLE_PATH</li>
</ul>


<p>So to run the same ruby script script.rb, simply use the Ruby you want and run it with rvmsudo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm use 1.9.3
</span><span class='line'>rvmsudo ruby script.rb
</span></code></pre></td></tr></table></div></figure>


<p>As always, running commands as the root user with elevated privileges, needs to be carefully done since they can alter settings and install unwanted features to all users of the system.
[Follow our friendly trusted neighborhood spidey.. With Great power comes Great Responsibility]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generate random string in ruby]]></title>
    <link href="http://hlee.github.com/blog/2012/11/28/generate-random-string-in-ruby/"/>
    <updated>2012-11-28T22:39:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/28/generate-random-string-in-ruby</id>
    <content type="html"><![CDATA[<p>Sometimes we need to generate a &#8216;n&#8217; character random string.</p>

<p>Here are a few:</p>

<ul>
<li><strong>Only upper case alphabets [A-Z]</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="mi">8</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="n">value</span>  <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">25</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span><span class="p">}</span> <span class="o">&gt;&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">#or</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="mi">65</span><span class="o">.</span><span class="n">+</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span><span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)</span><span class="o">]</span>  <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Lower case and upper case [a-zA-Z]</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="mi">8</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="o">?</span><span class="mi">65</span><span class="p">:</span><span class="mi">97</span><span class="p">)</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">25</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span><span class="p">}</span> <span class="o">&gt;&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">#or</span>
</span><span class='line'><span class="n">o</span> <span class="o">=</span>  <span class="o">[</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">),(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">].</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_a</span><span class="p">}</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'><span class="n">string</span>  <span class="o">=</span>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">50</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="n">o</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">o</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span>  <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Using SecureRandom provided by ActiveSupport</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/secure_random&#39;</span>
</span><span class='line'><span class="n">random_string</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># outputs: 5b5cd0da3121fc53b4bc84d0c8af2e81</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>SecureRandom also has methods for:</li>
</ul>


<p>base64</p>

<ol>
<li>hex</li>
<li>random_bytes</li>
<li>random_number</li>
</ol>


<p><a href="http://api.rubyonrails.org/v3.0.9/classes/ActiveSupport/SecureRandom.html">see:</a></p>

<ul>
<li><strong>It is also important to avoid Ambiguity</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Generates a random string from a set of easily readable characters</span>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_activation_code</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="n">charset</span> <span class="o">=</span> <span class="sx">%w{ 2 3 4 6 7 9 A C D E F G H J K M N P Q R T V W X Y Z}</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="n">charset</span><span class="o">.</span><span class="n">to_a</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">charset</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Random URL Friendly Strings</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">rand</span><span class="p">(</span><span class="mi">36</span><span class="o">**</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">36</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>One more example with SecureRandom</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">urlsafe_base64</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Creating a Random string with arguments</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">random_string</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chars</span> <span class="o">=</span> <span class="s1">&#39;abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789&#39;</span>
</span><span class='line'>  <span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">password</span> <span class="o">&lt;&lt;</span> <span class="n">chars</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">chars</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">password</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>This example works Only in ruby 1.9</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[*</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">].</span><span class="n">sample</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="c1">#Generate a random 8 letter string (e.g. NVAYXHGR)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">[*</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">),</span><span class="o">*</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;9&#39;</span><span class="p">)</span><span class="o">]-</span><span class="sx">%w(0 1 I O)</span><span class="p">)</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="c1">#Generate a random 8 character string (e.g. 3PH4SWF2), excludes 0/1/I/O. Ruby 1.9</span>
</span><span class='line'><span class="no">ALPHABET</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="no">ALPHABET</span><span class="o">.</span><span class="n">sample</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">){</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="no">ALPHABET</span><span class="o">.</span><span class="n">sample</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Here&#8217;s one using digest sha1</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sha1&#39;</span>
</span><span class='line'><span class="nb">srand</span>
</span><span class='line'><span class="n">seed</span> <span class="o">=</span> <span class="s2">&quot;--</span><span class="si">#{</span><span class="nb">rand</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span><span class="si">}</span><span class="s2">--</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">--&quot;</span>
</span><span class='line'><span class="no">Digest</span><span class="o">::</span><span class="no">SHA1</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>Here are more examples to help</strong></p></li>
<li><p>Example 1</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">256</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">36</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span>
</span><span class='line'><span class="c1">#Add ljust if you are really paranoid about the correct string length:</span>
</span><span class='line'><span class="nb">rand</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">256</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">36</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span>
</span><span class='line'><span class="n">characters</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="c1"># Prior to 1.9, use .choice, not .sample</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="n">characters</span><span class="o">.</span><span class="n">sample</span><span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">value</span>  <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">25</span><span class="p">))</span><span class="o">.</span><span class="n">chr</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 2</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">generate_random_string</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">chars</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;Z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">&lt;&lt;</span> <span class="n">chars</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">chars</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">string</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 3</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chars</span> <span class="o">=</span> <span class="o">[*</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">),</span><span class="o">*</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;9&#39;</span><span class="p">)</span><span class="o">].</span><span class="n">flatten</span>
</span><span class='line'><span class="c1">#Single expression, can be passed as an argument, allows duplicate characters:</span>
</span><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">len</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">chars</span><span class="o">.</span><span class="n">sample</span><span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 4</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">token</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chars</span> <span class="o">=</span> <span class="o">[*</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">),</span> <span class="o">*</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">),</span> <span class="o">*</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.length</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="n">chars</span><span class="o">.</span><span class="n">sample</span><span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 5</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="mi">4</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">v</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sample</span><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 6</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="nb">rand</span><span class="p">}</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="n">length</span><span class="o">].</span><span class="n">join</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 7</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">((</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="o">+</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="p">)</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="o">[</span><span class="p">(</span><span class="mi">48</span><span class="o">.</span><span class="n">.</span><span class="mi">57</span><span class="p">),(</span><span class="mi">65</span><span class="o">.</span><span class="n">.</span><span class="mi">90</span><span class="p">),(</span><span class="mi">97</span><span class="o">.</span><span class="n">.</span><span class="mi">122</span><span class="p">)</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">x</span><span class="o">.</span><span class="n">chr</span><span class="p">}</span><span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 8</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">secure_random_string</span><span class="p">(</span><span class="n">length</span> <span class="o">=</span> <span class="mi">32</span><span class="p">,</span> <span class="n">non_ambiguous</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="n">characters</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;9&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>
</span><span class='line'>  <span class="sx">%w{I O l 0 1}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="n">ambiguous_character</span><span class="o">|</span>
</span><span class='line'>    <span class="n">characters</span><span class="o">.</span><span class="n">delete</span> <span class="n">ambiguous_character</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">if</span> <span class="n">non_ambiguous</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span>
</span><span class='line'>    <span class="n">characters</span><span class="o">[</span><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">SecureRandom</span><span class="o">.</span><span class="n">random_number</span><span class="p">(</span><span class="n">characters</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Example 9</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SecureRandom</span><span class="o">.</span><span class="n">base64</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span><span class="o">.</span><span class="n">tr</span><span class="p">(</span><span class="s1">&#39;+/=lIO0&#39;</span><span class="p">,</span> <span class="s1">&#39;pqrsxyz&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># ruby 1.8 and unix</span>
</span><span class='line'><span class="n">random_string</span> <span class="o">=</span> <span class="sb">`openssl rand -base64 24`</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/88311/how-best-to-generate-a-random-string-in-ruby">.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generate random number in ruby]]></title>
    <link href="http://hlee.github.com/blog/2012/11/28/generate-random-number-in-ruby/"/>
    <updated>2012-11-28T22:27:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/28/generate-random-number-in-ruby</id>
    <content type="html"><![CDATA[<p>Sometimes we would also need to generate x random numbers from n to m</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="n">n</span> <span class="o">+</span> <span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span> <span class="n">m</span> <span class="o">-</span> <span class="n">n</span> <span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Random</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="c1">#in ruby 1.9.3</span>
</span><span class='line'><span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>if you only want to select a random item form array<a href="http://stackoverflow.com/questions/198460/how-to-get-a-random-number-in-ruby">.</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%(a b c d e)</span><span class="o">.</span><span class="n">sample</span>
</span><span class='line'><span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">m</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sample</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some other ways by using SecureRandom</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">random_number</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="c1">#=&gt; 15</span>
</span><span class='line'><span class="nb">p</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">random_number</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="c1">#=&gt; 88</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">random_number</span> <span class="c1">#=&gt; 0.596506046187744</span>
</span><span class='line'><span class="nb">p</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">random_number</span> <span class="c1">#=&gt; 0.350621695741409</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span> <span class="c1">#=&gt; &quot;eb693ec8252cd630102fd0d0fb7c3485&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing rvm on a Mac - Issues With gcc]]></title>
    <link href="http://hlee.github.com/blog/2012/11/28/install-rvm-at-mac-with-gcc-problem/"/>
    <updated>2012-11-28T08:45:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/28/install-rvm-at-mac-with-gcc-problem</id>
    <content type="html"><![CDATA[<p>While installing RVM on a mac, one of the major problems we face are due to missing Xcode. We usually get the error below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm install 1.9.3
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /Users/jamie/.rvm/rubies/ruby-1.9.3-p0, this may take a <span class="k">while </span>depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>
</span><span class='line'>ruby-1.9.3-p0 - <span class="c">#fetching </span>
</span><span class='line'>ruby-1.9.3-p0 - <span class="c">#extracted to /Users/jamie/.rvm/src/ruby-1.9.3-p0 (already extracted)</span>
</span><span class='line'>Fetching yaml-0.1.4.tar.gz to /Users/jamie/.rvm/archives
</span><span class='line'>Extracting yaml-0.1.4.tar.gz to /Users/jamie/.rvm/src
</span><span class='line'>Configuring yaml in /Users/jamie/.rvm/src/yaml-0.1.4.
</span><span class='line'>Compiling yaml in /Users/jamie/.rvm/src/yaml-0.1.4.
</span><span class='line'>Installing yaml to /Users/jamie/.rvm/usr
</span><span class='line'>ruby-1.9.3-p0 - <span class="c">#configuring </span>
</span><span class='line'>ERROR: Error running <span class="s1">&#39; ./configure --prefix=/Users/jamie/.rvm/rubies/ruby-1.9.3-p0 --enable-shared --disable-install-doc --with-libyaml-dir=/Users/jamie/.rvm/usr &#39;</span>, please <span class="nb">read</span> /Users/jamie/.rvm/log/ruby-1.9.3-p0/configure.log
</span><span class='line'>ERROR: There has been an error <span class="k">while </span>running configure. Halting the installation.
</span></code></pre></td></tr></table></div></figure>


<p>The Error message also looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm install 1.9.3
</span><span class='line'>ERROR: The autodetected CC<span class="o">(</span>/usr/bin/gcc-4.2<span class="o">)</span> is LLVM based, it is not yet fully supported by ruby and gems, please <span class="nb">read</span> <span class="sb">`</span>rvm requirements<span class="sb">`</span>, and <span class="nb">set </span><span class="nv">CC</span><span class="o">=</span>/path/to/gcc .
</span></code></pre></td></tr></table></div></figure>


<p>Find the GCC installed in Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gcc -v
</span><span class='line'>Using built-in specs.
</span><span class='line'>Target: i686-apple-darwin11
</span><span class='line'>Configured with: /private/var/tmp/llvmgcc42/llvmgcc42-2336.1~1/src/configure --disable-checking --enable-werror --prefix<span class="o">=</span>/Developer/usr/llvm-gcc-4.2 --mandir<span class="o">=</span>/share/man --enable-languages<span class="o">=</span>c,objc,c++,obj-c++ --program-prefix<span class="o">=</span>llvm- --program-transform-name<span class="o">=</span>/^<span class="o">[</span>cg<span class="o">][</span>^.-<span class="o">]</span>*<span class="nv">$/</span>s/<span class="nv">$/</span>-4.2/ --with-slibdir<span class="o">=</span>/usr/lib --build<span class="o">=</span>i686-apple-darwin11 --enable-llvm<span class="o">=</span>/private/var/tmp/llvmgcc42/llvmgcc42-2336.1~1/dst-llvmCore/Developer/usr/local --program-prefix<span class="o">=</span>i686-apple-darwin11- --host<span class="o">=</span>x86_64-apple-darwin11 --target<span class="o">=</span>i686-apple-darwin11 --with-gxx-include-dir<span class="o">=</span>/usr/include/c++/4.2.1
</span><span class='line'>Thread model: posix
</span><span class='line'>gcc version 4.2.1 <span class="o">(</span>Based on Apple Inc. build 5658<span class="o">)</span> <span class="o">(</span>LLVM build 2336.1.00<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>also look for the files in user/bin</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ls /usr/bin | grep gcc
</span><span class='line'>gcc
</span><span class='line'>i686-apple-darwin11-llvm-gcc-4.2
</span><span class='line'>llvm-gcc
</span><span class='line'>llvm-gcc-4.2
</span></code></pre></td></tr></table></div></figure>


<p>Here are a few ways to resolve this - read them all to get a better understanding of ways to fix issues like these:</p>

<ul>
<li>Install with clang</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm install 1.9.3 --with-gcc<span class="o">=</span>clang
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install a lighter version of gcc osx-gcc</li>
</ul>


<p><a href="https://github.com/kennethreitz/osx-gcc-installer/downloads">LLVM GCC</a></p>

<p>Be carefull about this, sometimes there are conflicts with Brew</p>

<ul>
<li><p>The best of them all could still be to use the <a href="https://developer.apple.com/downloads/index.action">command line tools for xcode</a></p></li>
<li><p>If you face issues with readline, its best to pkg install readline</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm pkg install readline
</span><span class='line'>rvm install 1.9.3 --with-gcc<span class="o">=</span>clang --with-readline-dir<span class="o">=</span><span class="nv">$rvm_path</span>/usr
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>(xcode 4.5) install RVM on Mac OSX 10.8 (Mountain Lion) with Xcode 4.5 <a href="https://gist.github.com/3789921">without installing Command Line Tools</a></li>
</ul>


<p><a href="http://stackoverflow.com/questions/8032824/cant-install-ruby-under-lion-with-rvm-gcc-issues">.</a></p>

<p>Any questions on this, please feel free to ask. We’re here to help…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing Command Line Arguments to Rake Tasks]]></title>
    <link href="http://hlee.github.com/blog/2012/11/28/pass-command-line-arguments-to-a-rake-task/"/>
    <updated>2012-11-28T08:02:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/28/pass-command-line-arguments-to-a-rake-task</id>
    <content type="html"><![CDATA[<p>Sometimes, we need to rake tasks that inserts a paticular user entered value into multiple databases.</p>

<p>We&#8217;d like to be able to pass this value into the rake task from the command line, or from another rake task, how can We do this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:my_task</span><span class="p">,</span> <span class="ss">:arg1</span><span class="p">,</span> <span class="ss">:arg2</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Args were: </span><span class="si">#{</span><span class="n">args</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can invoke it by using the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:invoke_my_task</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">invoke_task</span><span class="p">(</span><span class="s2">&quot;my_task[1, 2]&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>or if you prefer this syntax&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:invoke_my_task_2</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="ss">:my_task</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A task with prerequisites passes its arguments to it prerequisites(tasks)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:with_prerequisite</span><span class="p">,</span> <span class="ss">:arg1</span><span class="p">,</span> <span class="ss">:arg2</span><span class="p">,</span> <span class="ss">:needs</span> <span class="o">=&gt;</span> <span class="ss">:my_task</span>
</span></code></pre></td></tr></table></div></figure>


<p>or just a&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:with_prerequisite</span><span class="p">,</span> <span class="o">[</span><span class="ss">:arg1</span><span class="p">,</span> <span class="ss">:arg2</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:my_task</span>
</span></code></pre></td></tr></table></div></figure>


<p>To specify default values, we take advantage of args being a Rake::TaskArguments object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:with_defaults</span><span class="p">,</span> <span class="ss">:arg1</span><span class="p">,</span> <span class="ss">:arg2</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">with_defaults</span><span class="p">(</span><span class="ss">:arg1</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:arg2</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Args with defaults were: </span><span class="si">#{</span><span class="n">args</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are a few usages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; rake my_task<span class="o">[</span>1,2<span class="o">]</span>
</span><span class='line'>Args were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;<span class="s2">&quot;1&quot;</span>, :arg2<span class="o">=</span>&gt;<span class="s2">&quot;2&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>&gt; rake <span class="s2">&quot;my_task[1, 2]&quot;</span>
</span><span class='line'>Args were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;<span class="s2">&quot;1&quot;</span>, :arg2<span class="o">=</span>&gt;<span class="s2">&quot;2&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>&gt; rake invoke_my_task
</span><span class='line'>Args were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;<span class="s2">&quot;1&quot;</span>, :arg2<span class="o">=</span>&gt;<span class="s2">&quot;2&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>&gt; rake invoke_my_task_2
</span><span class='line'>Args were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;3, :arg2<span class="o">=</span>&gt;4<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>&gt; rake with_prerequisite<span class="o">[</span>5,6<span class="o">]</span>
</span><span class='line'>Args were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;<span class="s2">&quot;5&quot;</span>, :arg2<span class="o">=</span>&gt;<span class="s2">&quot;6&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>&gt; rake with_prerequisite_2<span class="o">[</span>7,8<span class="o">]</span>
</span><span class='line'>Args were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;<span class="s2">&quot;7&quot;</span>, :arg2<span class="o">=</span>&gt;<span class="s2">&quot;8&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>&gt; rake with_defaults
</span><span class='line'>Args with defaults were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;:default_1, :arg2<span class="o">=</span>&gt;:default_2<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>&gt; rake with_defaults<span class="o">[</span><span class="s1">&#39;x&#39;</span>,<span class="s1">&#39;y&#39;</span><span class="o">]</span>
</span><span class='line'>Args with defaults were: <span class="o">{</span>:arg1<span class="o">=</span>&gt;<span class="s2">&quot;x&quot;</span>, :arg2<span class="o">=</span>&gt;<span class="s2">&quot;y&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://rake.rubyforge.org/files/doc/rakefile_rdoc.html">For more information&#8230;</a></p>

<p><a href="http://stackoverflow.com/questions/825748/how-do-i-pass-command-line-arguments-to-a-rake-task">.</a></p>

<p>Any questions on this, please feel free to ask. We’re here to help…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using NET to Post API Calls With or Without Secure Connections]]></title>
    <link href="http://hlee.github.com/blog/2012/11/28/using-net-to-post/"/>
    <updated>2012-11-28T06:45:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/28/using-net-to-post</id>
    <content type="html"><![CDATA[<p>Using Net module is the best and the eaiest ways to post data or make api calls
to urls. Here&#8217;s an example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">post_using_net</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">use_ssl</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">verify_mode</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">request_uri</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">to_query</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>for connections that does not use ssl i.e (https) the following can be removed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">use_ssl</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">verify_mode</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Net also handles get, put and delete, to make it work for muliple requests,
just use a send to make calls to the methods</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">send_using_net</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">use_ssl</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">verify_mode</span> <span class="o">=</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">VERIFY_NONE</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">send</span> <span class="nb">method</span><span class="p">,</span> <span class="o">[</span><span class="n">uri</span><span class="o">.</span><span class="n">request_uri</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">to_query</span><span class="o">]</span>
</span><span class='line'>  <span class="n">response</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timestamps strftime vs strptime]]></title>
    <link href="http://hlee.github.com/blog/2012/11/28/timestamps-strftime-vs-strptime/"/>
    <updated>2012-11-28T06:20:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/28/timestamps-strftime-vs-strptime</id>
    <content type="html"><![CDATA[<h3>strftime</h3>

<p>Formats date according to the directives in the given format string. The directives begins with a percent (%) character. Any text not listed as a directive will be passed through to the output string.</p>

<p><a href="http://apidock.com/ruby/DateTime/strftime">source link</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%FT%T%:z&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#  %F - The ISO 8601 date format (%Y-%m-%d)</span>
</span><span class='line'><span class="c1">#  %T - 24-hour time (%H:%M:%S)</span>
</span><span class='line'><span class="c1">#  %:z - hour and minute offset from UTC with a colon (e.g. +09:00)</span>
</span><span class='line'><span class="c1">#  output: 2012-11-28T06:29:36-05:00</span>
</span></code></pre></td></tr></table></div></figure>


<h3>strptime</h3>

<p>Parses the given representation of date and time with the given template, and creates a date object.</p>

<p><a href="http://apidock.com/ruby/DateTime/strptime/class">source link</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">format</span> <span class="o">=</span> <span class="s2">&quot;%m/%d/%Y %H:%M:%S&quot;</span>
</span><span class='line'><span class="n">date_time</span> <span class="o">=</span> <span class="s2">&quot;11/28/2012 16:39:11.642&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">date_obj</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">date_time</span><span class="p">,</span> <span class="nb">format</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Digests and Signatures]]></title>
    <link href="http://hlee.github.com/blog/2012/11/28/working-on-digests-and-signatures/"/>
    <updated>2012-11-28T05:53:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/28/working-on-digests-and-signatures</id>
    <content type="html"><![CDATA[<h3>MD5 digests</h3>

<p>MD5 is a one-way hashing algorithm for creating digest &#8220;signatures&#8221; or checksums of strings. MD5 digests are 128 bit (16 byte) signatures. MD5 is the most common method of providing checksums for files downloaded over the internet.
To create a checksum of an entire file or text convert the whole string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">digest</span> <span class="o">=</span> <span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">string_to_digest</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.siaris.net/index.cgi/Programming/LanguageBits/Ruby/MD5.rdoc">source link</a></p>

<h3>hmac-sha1</h3>

<p>In cryptography, a hash-based message authentication code (HMAC) is a specific construction for calculating a message authentication code (MAC) involving a cryptographic hash function in combination with a secret cryptographic key. As with any MAC, it may be used to simultaneously verify both the data integrity and the authenticity of a message.</p>

<p><a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code">source link</a></p>

<p>In ruby its simple to generate one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">ruby</span><span class="o">-</span><span class="n">hmac</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hmac_sha1</span> <span class="n">params</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;openssl&#39;</span>
</span><span class='line'>  <span class="n">secret_key</span> <span class="o">=</span> <span class="s1">&#39;No telling a secret&#39;</span>
</span><span class='line'>  <span class="no">OpenSSL</span><span class="o">::</span><span class="no">HMAC</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">secret_key</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applying Common Filtering for Rails Api Based Applications]]></title>
    <link href="http://hlee.github.com/blog/2012/11/26/applying-common-filtering-for-rails-api-based-applications/"/>
    <updated>2012-11-26T22:50:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/26/applying-common-filtering-for-rails-api-based-applications</id>
    <content type="html"><![CDATA[<p>Sometimes there are common sets of fields and id&#8217;s that we would like the api
to filter before sending the details to the client. It would be great if we can
place them in a common place so that they can be changed anytime.</p>

<p>File: lib/api_config.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Filters out the specified list of fields from the API calls</span>
</span><span class='line'><span class="no">APIFILTERS</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="s1">&#39;secret__internal_id&#39;</span><span class="p">,</span><span class="s1">&#39;updated_at&#39;</span><span class="p">,</span><span class="s1">&#39;created_at&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>File: config/initializers/json_config.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Requiring the api configuration file</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;api_config&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">as_json_with_filter</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:except</span><span class="o">]</span> <span class="o">=</span> <span class="no">APIFILTERS</span>
</span><span class='line'>    <span class="n">as_json_without_filter</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">alias_method_chain</span> <span class="ss">:as_json</span><span class="p">,</span> <span class="ss">:filter</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>the alias_method_chain does two things here:</p>

<ul>
<li><p>firstly it creates an alias method called as_json_without_filter to as_json</p></li>
<li><p>secondly it looks for as_json_with_filter and makes that as the new as_json
method</p></li>
</ul>


<p>The as_json method is one that gets called when the to_json method is called on a
model object or a collection of model objects in rails</p>

<p>example: users controller file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="vi">@user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>the above would call the as_json method of the user model, we have just
overridden the super class to filter out a few fields</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">as_json</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="k">super</span><span class="p">(</span><span class="ss">:include</span> <span class="o">=&gt;</span> <span class="ss">:parents</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>for xml, this is slightly Different</p>

<p>File: config/initializers/xml_config.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Requiring the api configuration file</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;api_config&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:to_xml</span><span class="p">,</span> <span class="ss">:old_to_xml</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_xml</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:except</span><span class="o">]</span> <span class="o">=</span> <span class="no">APIFILTERS</span>
</span><span class='line'>    <span class="n">old_to_xml</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any questions, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initializing Custom YML Configuration Variables for Different Environments in Rails]]></title>
    <link href="http://hlee.github.com/blog/2012/11/26/initializing-custom-yml-configuration-variables-for-environments-in-rails/"/>
    <updated>2012-11-26T22:22:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/26/initializing-custom-yml-configuration-variables-for-environments-in-rails</id>
    <content type="html"><![CDATA[<p>Another common problem that rails developers face while developing web
applications that connect to multiple external systems and api&#8217;s is configuring
the the same parameters for different environments.</p>

<p>The simplest way -</p>

<ul>
<li><p>Add a folder to the config folder of your application</p></li>
<li><p>Add all the configuration in as a yml file, like how we use the database.yml
 with all the environments in it</p></li>
</ul>


<p>sample file: config/google_api.yml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span> <span class="nl">&amp;default_settings</span>
</span><span class='line'>  <span class="l-Scalar-Plain">google_analytics_id</span><span class="p-Indicator">:</span> <span class="s">&#39;UA-xxxxxxxx-1&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*default_settings</span>
</span><span class='line'><span class="l-Scalar-Plain">sandbox</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">google_analytics_id</span><span class="p-Indicator">:</span> <span class="s">&#39;UA-xxxxxxxx-2&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">staging</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">google_analytics_id</span><span class="p-Indicator">:</span> <span class="s">&#39;UA-xxxxxxxx-3&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">google_analytics_id</span><span class="p-Indicator">:</span> <span class="s">&#39;UA-xxxxxxxx-4&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  the &amp;default_settings and *default_settings can be used to pass the same
  values into another yml</p>

<ul>
<li><p>add the following to your rb file:</p>

<p>File: config/environment.rb</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Load the rails application</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../application&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Auto Load APP_CONFIG for the corresponding environment configuration</span>
</span><span class='line'><span class="no">APP_CONFIG</span> <span class="o">=</span> <span class="no">HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">load_files</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/app_config/*.yml&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="no">APP_CONFIG</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Initialize the rails application</span>
</span><span class='line'><span class="no">Livegamer</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">initialize!</span>
</span></code></pre></td></tr></table></div></figure>


<p>  The above code adds all the yml files inside the folder we created(app_config) under the config folder to a
  hash(APP_CONFIG).</p>

<ul>
<li>Now we can use get the google analytics id with the following</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">google_id</span> <span class="o">=</span> <span class="no">APP_CONFIG</span><span class="o">[</span><span class="s1">&#39;google_analytics_id&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>  This would return the corresponding configuration variable depending upon the
  environment.</p>

<p>  Simple.. :)</p>

<p>  Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extend vs Include in Ruby Module]]></title>
    <link href="http://hlee.github.com/blog/2012/11/24/extend-vs-include-in-ruby-module/"/>
    <updated>2012-11-24T08:04:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/24/extend-vs-include-in-ruby-module</id>
    <content type="html"><![CDATA[<p><strong>Extend vs. Include</strong>
Modules are used for mixins, ruby&#8217;s way of handling muliple inheritance without the complications.
There are two ways to mixin, either include or extend to mix in a module’s functionality into a class.</p>

<p><strong>Difference:</strong></p>

<p>include makes the module’s methods available to the instance of a class,
attached to the instances of the class alone.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;heyyyyoooo!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># heyyyyoooo!</span>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for Bar:Class</span>
</span></code></pre></td></tr></table></div></figure>


<p>extend makes these methods available to the class as class methods, implemented
with a self &lt;&lt; class*</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Baz</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># heyyyyoooo!</span>
</span><span class='line'><span class="no">Baz</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># NoMethodError: undefined method ‘foo’ for #\&lt;Baz:0x1e708&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>More information here at the <a href="http://railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/">source link</a>.</p>

<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Comparison Operators]]></title>
    <link href="http://hlee.github.com/blog/2012/11/24/ruby-comparison-operators/"/>
    <updated>2012-11-24T07:59:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/24/ruby-comparison-operators</id>
    <content type="html"><![CDATA[<p>There has been lots of questions on the comparison operators. So we yanked it for you..</p>

<table class="src" border="1" cellpadding="5" cellspacing="0" width="100%">
<tbody><tr>
<th width="10%">Operator</th><th width="45%">Description</th><th>Example</th>
</tr>
<tr>
<td>==</td><td> Checks if the value of two operands are equal or not, if yes then condition becomes true.</td><td> (a == b) is not true. </td>
</tr>
<tr>
<td>!=</td><td> Checks if the value of two operands are equal or not, if values are not equal then condition becomes true.</td><td> (a != b) is true. </td>
</tr>
<tr>
<td>&gt;</td><td> Checks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.</td><td> (a &gt; b) is not true. </td>
</tr>
<tr>
<td>&lt;</td><td> Checks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.</td><td> (a &lt; b) is true. </td>
</tr>
<tr>
<td>&gt;=</td><td> Checks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td><td> (a &gt;= b) is not true. </td>
</tr>
<tr>
<td>&lt;=</td><td> Checks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.</td><td> (a &lt;= b) is true. </td>
</tr>
<tr>
<td>&lt;=&gt;</td><td> Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.</td><td> (a &lt;=&gt; b)  returns -1. </td>
</tr>
<tr>
<td>===</td><td> Used to test equality within a when clause of a <i>case</i> statement.</td><td> (1&#8230;10) === 5 returns true. </td>
</tr>
<tr>
<td><b>.eql?</b></td><td>True if the receiver and argument have both the same type and equal values.</td><td> 1
== 1.0 returns true, but 1<b>.eql?</b>(1.0) is false.</td>
</tr>
<tr>
<td><b>equal?</b></td><td>True if the receiver and argument have the same object id.</td><td> 1
== 1.0 returns true, but 1<b>.eql?</b>(1.0) is false.</td>
</tr>
</tbody></table>


<p>There&#8217;s more here at the <a href="http://www.tutorialspoint.com/ruby/ruby_operators.htm">Source Link</a></p>

<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with Processes in Unix]]></title>
    <link href="http://hlee.github.com/blog/2012/11/24/working-with-processes-in-unix/"/>
    <updated>2012-11-24T07:08:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/24/working-with-processes-in-unix</id>
    <content type="html"><![CDATA[<p>There are two commands heavily used by developers for checking their pocesses
in unix.</p>

<ol>
<li>Firstly it is the search for processes</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ps -ef | grep search_process
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ps aux | grep search_process
</span></code></pre></td></tr></table></div></figure>


<p>what&#8217;s the difference, well both do the same task</p>

<p><a href="http://askubuntu.com/questions/129962/ps-ef-vs-ps-aux">link</a></p>

<p>Both list all processes of all users. In that aspect -e and ax are completely equivalent.
Where they differ is output format specifier, -f is &#8220;full&#8221;, while u is &#8220;user-oriented&#8221;. The displayed columns are different:
columns for ps -f
UID PID PPID C STIME TTY TIME CMD</p>

<p>columns for ps u
USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</p>

<p>The difference between ps -ef and ps aux is due to historical divergences between POSIX and BSD systems.
At the beginning, POSIX accepted the -ef while the BSD accepted only the aux form.</p>

<ol>
<li>Secondly to kill the process that we just found</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">kill</span> -9 pid
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">kill</span> -SIGKILL PID
</span></code></pre></td></tr></table></div></figure>


<p>or if we know the process name and if the unix system supports</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>killall nginx
</span></code></pre></td></tr></table></div></figure>


<p>Tip: What if we need to kill all the processes that starts with &#8216;schedule&#8217;.
Here it is..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ps aux | grep schedule | grep -v grep | awk <span class="s1">&#39;{print $2}&#39;</span> | xargs <span class="nb">kill</span> -9
</span></code></pre></td></tr></table></div></figure>


<p>A quick description of the steps:</p>

<ol>
<li>&#8220;ps aux | grep schedule&#8221; searches for the processes by the name schedule and
returns the rows</li>
<li>&#8220;grep -v grep&#8221; excludes grep from the searched process list (rows)</li>
<li>&#8220;awk &#8216;{print $2}&#8217;&#8221; prints the second column of all the values returned.
Which is mostly the process Id, if not choose the corresponding column by
its number of appearance in the rows returned</li>
<li>&#8220;xargs kill -9&#8221; sends the kill signal to all the selected process Ids</li>
</ol>


<p>Please make sure that you are searching for the right processes before killing them.</p>

<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a development mailer for Rails with a gmail account]]></title>
    <link href="http://hlee.github.com/blog/2012/11/24/setting-up-a-development-mailer-for-rails-with-a-gmail-account/"/>
    <updated>2012-11-24T06:42:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/24/setting-up-a-development-mailer-for-rails-with-a-gmail-account</id>
    <content type="html"><![CDATA[<p>Setting up the rails mailer for development purposes is much easier. using the
action mailer to configure the gmail services, is just a few commands and
configurations away&#8230;</p>

<p>Make sure that these settings are not used in production.</p>

<ol>
<li>Firstly <a href="https://accounts.google.com/SignUp">Sign Up</a> for a dummy gmail account.</li>
<li>Next add the following configuration in development.rb</li>
</ol>


<p>File: config/environments/development.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>config.action_mailer.raise_delivery_errors <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>config.action_mailer.delivery_method <span class="o">=</span> :smtp
</span><span class='line'>config.action_mailer.smtp_settings <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  :address              <span class="o">=</span>&gt; <span class="s2">&quot;smtp.gmail.com&quot;</span>,
</span><span class='line'>  :port                 <span class="o">=</span>&gt; 587,
</span><span class='line'>  :domain               <span class="o">=</span>&gt; <span class="s1">&#39;&lt;your_domain&gt;&#39;</span>,
</span><span class='line'>  :user_name            <span class="o">=</span>&gt; <span class="s1">&#39;&lt;user_name&gt;&#39;</span>,
</span><span class='line'>  :password             <span class="o">=</span>&gt; <span class="s1">&#39;&lt;password&gt;&#39;</span>,
</span><span class='line'>  :authentication       <span class="o">=</span>&gt; <span class="s1">&#39;plain&#39;</span>,
</span><span class='line'>  :enable_starttls_auto <span class="o">=</span>&gt; <span class="nb">true</span>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Login to the gmail account and check the sent mails, to preview the sent mail.</p>

<p>There&#8217;s a lot more that can be done with this, check the <a href="http://guides.rubyonrails.org/action_mailer_basics.html#action-mailer-configuration-for-gmail">Rails Guids</a> for more information.</p>

<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using screen to keep unix sessions active]]></title>
    <link href="http://hlee.github.com/blog/2012/11/24/using-screen-to-keep-unix-sessions-active/"/>
    <updated>2012-11-24T05:54:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/24/using-screen-to-keep-unix-sessions-active</id>
    <content type="html"><![CDATA[<p>In Unix, what is screen, and how do I use it?</p>

<p>The screen program allows you to use multiple windows (virtual VT100 terminals) in Unix.</p>

<p>Note: UITS does not support screen.</p>

<h3>Features</h3>

<ol>
<li>If your local computer crashes, or you are connected via a modem and lose the connection, the processes or login sessions you establish through screen don&#8217;t go away. You can resume your screen sessions with the following command:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  screen -r
</span></code></pre></td></tr></table></div></figure>


<p>In some cases you may have to manually &#8220;detach&#8221; your screen session before resuming it. For more information, see the Knowledge Base document Using screen, why can&#8217;t I re-attach to my session after a lost connection?</p>

<ol>
<li><p>The screen program creates multiple processes instead of multiple Unix login sessions, which means that it is resource-efficient.</p></li>
<li><p>You can cut and paste between different screens without using a mouse. Thus, you don&#8217;t need to be on a computer with a windowing environment such as Mac OS, Mac OS X, Windows, or the X Window System.</p></li>
<li><p>It has a block copy feature which is similar to the kill rectangle feature of Emacs.</p></li>
<li><p>You can copy and paste more than one page at a time, which you cannot do with some clients. You can scroll up more than one page, depending on how many scrolling lines you have set with the  -h  option.</p></li>
<li><p>Using the detach feature, you can save screen processes when logging out and resume where you left off, saving the trouble of restarting them.</p></li>
</ol>


<h3>Starting screen</h3>

<p>To start screen, enter the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  screen
</span></code></pre></td></tr></table></div></figure>


<h3>General commands</h3>

<p>Note: Every screen command begins with Ctrl-a .</p>

<table cellpadding="10">
  <tr align="left" valign="top">
    <td align="left">
      <code>Ctrl-a&nbsp;c</code> </td>
    <td align="left">Create new window (shell) </td>
  </tr>
  <tr valign="top">
    <td align="left">
      <code>Ctrl-a&nbsp;k</code> 
     </td>
    <td align="left">Kill the current window
  </td>
  </tr>
  <tr valign="top">
    <td align="left">
      <code>Ctrl-a&nbsp;w</code>
    </td>
    <td align="left">List all windows (the current window is marked with &#8220;*&#8221;)</td>
  </tr>
  <tr valign="top">
    <td align="left">
      <code>Ctrl-a&nbsp;0-9</code>
    </td>
    <td align="left">Go to a window numbered 0-9</td>
  </tr>
  <tr valign="top">
    <td align="left">
      <code>Ctrl-a&nbsp;n</code>
    </td>
    <td align="left">Go to the next window </td>
  </tr>
  <tr valign="top">
    <td align="left">
      <code>Ctrl-a</code>&nbsp;<code>Ctrl-a </code>
    </td>
    <td align="left">Toggle between the current and previous window
    </td>
  </tr>
  <tr valign="top">
  <td align="left">
  <code>Ctrl-a&nbsp;[</code> </td>
  <td align="left">Start copy mode
  </td>
  </tr>
  <tr valign="top">
  <td align="left">
  <code>Ctrl-a&nbsp;]</code> </td>
  <td align="left">Paste copied text
  </td>
  </tr>
  <tr valign="top">
  <td align="left">
  <code>Ctrl-a&nbsp;?</code> </td>
  <td align="left">Help (display a list of commands)
  </td>
  </tr>
  <tr valign="top">
  <td align="left">
  <code>Ctrl-a</code>&nbsp;<code>Ctrl-\</code> </td>
  <td align="left">Quit <code>screen</code>
  </td>
  </tr>
  <tr valign="top">
  <td align="left">
  <code>Ctrl-a&nbsp;D</code> (Shift-d) </td>
  <td align="left">Power detach and logout
  </td>
  </tr>
  <tr valign="top">
  <td align="left">
  <code>Ctrl-a&nbsp;d</code> </td>
  <td align="left">Detach but keep shell window open</td>
  </tr>
</table>


<p>Press the Spacebar or Enter to end a command.</p>

<p><strong>To copy a block</strong></p>

<p>To get into copy mode, press Ctrl-a [  .</p>

<p>To move the cursor, press the  h ,  j ,  k , and  l  (the letter l) keys. The  0  (the number 0) or  ^  (the caret) moves to the start of the line and  $  (the dollar sign) moves to the end of the line. Ctrl-b scrolls the cursor back one page and Ctrl-f scrolls forward one page. To set the left and right margins of copy, press  c  and  C  (Shift-c). The Spacebar starts selecting the text and ends selecting the text. To abort copy mode, press Ctrl-g .</p>

<p><strong>To paste a block</strong></p>

<p>To paste the copied text to the current window (as many times as you want), press Ctrl-a ] .</p>

<p><strong>Other commands</strong></p>

<p>To run a program or execute any Unix command in a new window, at the Unix prompt, enter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  screen unixcommand
</span></code></pre></td></tr></table></div></figure>


<p>Above, replace unixcommand with the appropriate command name.</p>

<p>To automatically start several windows when you run screen, create a .screenrc file in your home directory and put screen commands in it.</p>

<p>To quit screen (kill all windows in the current session), press Ctrl-a Ctrl-\ .</p>

<p>The man pages for screen are quite readable and make a good tutorial. At the Unix prompt, enter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  man screen
</span></code></pre></td></tr></table></div></figure>


<h3>[Source Link][http://kb.iu.edu/data/acuy.html]</h3>

<h3>If your unix server does not support <a href="http://hlee.github.com/blog/2012/11/24/using-screen-to-keep-unix-sessions-active">screen</a>. It is always a better to run some commands with <a href="http://hlee.github.com/blog/2012/11/24/using-nohup-to-prevent-processes-stopping-on-disconnect">nohup</a>.</h3>

<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using nohup to prevent processes stopping on disconnect]]></title>
    <link href="http://hlee.github.com/blog/2012/11/24/using-nohup-to-prevent-processes-stopping-on-disconnect/"/>
    <updated>2012-11-24T05:32:00-05:00</updated>
    <id>http://hlee.github.com/blog/2012/11/24/using-nohup-to-prevent-processes-stopping-on-disconnect</id>
    <content type="html"><![CDATA[<p><strong>nohup</strong> is an unix command which prevents &#8220;hangups on logout&#8221; which also means that if you decide you need to logoff the from the session with the server, the  command will continue to run as the user.</p>

<p>Syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nohup run_command &amp;
</span></code></pre></td></tr></table></div></figure>


<p>run_command in the above Syntax is the name of the command you want to run.</p>

<p>And the &amp; at the end of the line makes the process run in the background. Once the command starts you can then continue to issue other commands or logout if you choose so. After executing the above command you&#8217;ll see this displayed on the command line, and you may need to press the <enter> key before being able to enter other commands.</p>

<p>This means that all the output from the command will go into a file called &#8220;nohup.out&#8221; in the current working directory. You can tail the same to check the logs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>tail -f nohup.out
</span></code></pre></td></tr></table></div></figure>


<p>Also we can alternatively output the text from the command to a different file using redirection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nohup run_command &gt; run_command.log &amp;
</span></code></pre></td></tr></table></div></figure>


<h3>If your unix server supports <a href="http://hlee.github.com/blog/2012/11/24/using-screen-to-keep-unix-sessions-active">screen</a>. It is always a better option with more features.</h3>

<p>Any questions on this, please feel free to ask. We&#8217;re here to help&#8230;</p>
]]></content>
  </entry>
  
</feed>
